---
# Agentic Orchestrator Deployment
# Claude 3.5 Sonnet streaming agents with tool-calling
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agentic-orchestrator
  namespace: newk8v2-production
  labels:
    app: agentic-orchestrator
    component: ai-agent
spec:
  replicas: 3
  selector:
    matchLabels:
      app: agentic-orchestrator
  template:
    metadata:
      labels:
        app: agentic-orchestrator
        component: ai-agent
    spec:
      containers:
      - name: orchestrator
        image: gcr.io/ezcoder-production/agentic-orchestrator:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8082
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8082"
        - name: REDIS_HOST
          value: "redis.newk8v2-production.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: AGENT_TYPE
          value: "generic"
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-api-keys
              key: anthropic-api-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-api-keys
              key: openai-api-key
              optional: true
        - name: WORKSPACE_ROOT
          value: "/workspace"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: workspace
          mountPath: /workspace
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
      volumes:
      - name: workspace
        emptyDir: {}
      restartPolicy: Always

---
# Service for health checks
apiVersion: v1
kind: Service
metadata:
  name: agentic-orchestrator
  namespace: newk8v2-production
  labels:
    app: agentic-orchestrator
spec:
  type: ClusterIP
  selector:
    app: agentic-orchestrator
  ports:
  - name: http
    port: 8082
    targetPort: 8082
    protocol: TCP

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: agentic-orchestrator-hpa
  namespace: newk8v2-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: agentic-orchestrator
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# Specialized Agent Types (Frontend Developer)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-frontend-developer
  namespace: newk8v2-production
  labels:
    app: ai-agent
    agent-type: frontend-developer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ai-agent
      agent-type: frontend-developer
  template:
    metadata:
      labels:
        app: ai-agent
        agent-type: frontend-developer
    spec:
      containers:
      - name: orchestrator
        image: gcr.io/ezcoder-production/agentic-orchestrator:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8082
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8082"
        - name: REDIS_HOST
          value: "redis.newk8v2-production.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: AGENT_TYPE
          value: "frontend-developer"
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-api-keys
              key: anthropic-api-key
        - name: WORKSPACE_ROOT
          value: "/workspace"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: workspace
          mountPath: /workspace
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: workspace
        emptyDir: {}

---
# Specialized Agent Types (Backend Developer)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-backend-developer
  namespace: newk8v2-production
  labels:
    app: ai-agent
    agent-type: backend-developer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ai-agent
      agent-type: backend-developer
  template:
    metadata:
      labels:
        app: ai-agent
        agent-type: backend-developer
    spec:
      containers:
      - name: orchestrator
        image: gcr.io/ezcoder-production/agentic-orchestrator:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8082
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8082"
        - name: REDIS_HOST
          value: "redis.newk8v2-production.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: AGENT_TYPE
          value: "backend-developer"
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-api-keys
              key: anthropic-api-key
        - name: WORKSPACE_ROOT
          value: "/workspace"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: workspace
          mountPath: /workspace
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: workspace
        emptyDir: {}

---
# Specialized Agent Types (Project Architect)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-project-architect
  namespace: newk8v2-production
  labels:
    app: ai-agent
    agent-type: project-architect
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ai-agent
      agent-type: project-architect
  template:
    metadata:
      labels:
        app: ai-agent
        agent-type: project-architect
    spec:
      containers:
      - name: orchestrator
        image: gcr.io/ezcoder-production/agentic-orchestrator:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8082
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8082"
        - name: REDIS_HOST
          value: "redis.newk8v2-production.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: AGENT_TYPE
          value: "project-architect"
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-api-keys
              key: anthropic-api-key
        - name: WORKSPACE_ROOT
          value: "/workspace"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        volumeMounts:
        - name: workspace
          mountPath: /workspace
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: workspace
        emptyDir: {}
